//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Packages/com.core/Runtime/Scripts/InputSchemeOnBoard.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSchemeOnBoard: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSchemeOnBoard()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSchemeOnBoard"",
    ""maps"": [
        {
            ""name"": ""Figure"",
            ""id"": ""1c59e1f6-e10a-4286-8ad8-b37f6befdab0"",
            ""actions"": [
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""1f31d443-40d4-4e11-b851-4268bc14de06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""308c516c-623c-417d-ab89-e51bcb4b6326"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8a006a88-cff2-4486-ae8d-21e294567b59"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0abcc406-007d-4981-814e-474f1a8474cc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cell"",
            ""id"": ""37aa1ea2-bfcf-41cf-a8e8-f5f471fad374"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""3a56efd9-c479-4b2c-86bc-2e5be7af7665"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17641e85-d7de-476e-88ae-224470e0df25"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Figure
        m_Figure = asset.FindActionMap("Figure", throwIfNotFound: true);
        m_Figure_Drag = m_Figure.FindAction("Drag", throwIfNotFound: true);
        m_Figure_Select = m_Figure.FindAction("Select", throwIfNotFound: true);
        // Cell
        m_Cell = asset.FindActionMap("Cell", throwIfNotFound: true);
        m_Cell_Select = m_Cell.FindAction("Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Figure
    private readonly InputActionMap m_Figure;
    private List<IFigureActions> m_FigureActionsCallbackInterfaces = new List<IFigureActions>();
    private readonly InputAction m_Figure_Drag;
    private readonly InputAction m_Figure_Select;
    public struct FigureActions
    {
        private @InputSchemeOnBoard m_Wrapper;
        public FigureActions(@InputSchemeOnBoard wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drag => m_Wrapper.m_Figure_Drag;
        public InputAction @Select => m_Wrapper.m_Figure_Select;
        public InputActionMap Get() { return m_Wrapper.m_Figure; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FigureActions set) { return set.Get(); }
        public void AddCallbacks(IFigureActions instance)
        {
            if (instance == null || m_Wrapper.m_FigureActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FigureActionsCallbackInterfaces.Add(instance);
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
        }

        private void UnregisterCallbacks(IFigureActions instance)
        {
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
        }

        public void RemoveCallbacks(IFigureActions instance)
        {
            if (m_Wrapper.m_FigureActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFigureActions instance)
        {
            foreach (var item in m_Wrapper.m_FigureActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FigureActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FigureActions @Figure => new FigureActions(this);

    // Cell
    private readonly InputActionMap m_Cell;
    private List<ICellActions> m_CellActionsCallbackInterfaces = new List<ICellActions>();
    private readonly InputAction m_Cell_Select;
    public struct CellActions
    {
        private @InputSchemeOnBoard m_Wrapper;
        public CellActions(@InputSchemeOnBoard wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Cell_Select;
        public InputActionMap Get() { return m_Wrapper.m_Cell; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CellActions set) { return set.Get(); }
        public void AddCallbacks(ICellActions instance)
        {
            if (instance == null || m_Wrapper.m_CellActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CellActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
        }

        private void UnregisterCallbacks(ICellActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
        }

        public void RemoveCallbacks(ICellActions instance)
        {
            if (m_Wrapper.m_CellActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICellActions instance)
        {
            foreach (var item in m_Wrapper.m_CellActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CellActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CellActions @Cell => new CellActions(this);
    public interface IFigureActions
    {
        void OnDrag(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
    public interface ICellActions
    {
        void OnSelect(InputAction.CallbackContext context);
    }
}
